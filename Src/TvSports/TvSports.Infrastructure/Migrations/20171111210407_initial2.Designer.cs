// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;
using TvSports.Infrastructure.Data;

namespace TvSports.Infrastructure.Migrations
{
    [DbContext(typeof(TvSportsContext))]
    [Migration("20171111210407_initial2")]
    partial class initial2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("Relational:Sequence:.Channel_hilo", "'Channel_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Competition_hilo", "'Competition_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Game_hilo", "'Game_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Participant_hilo", "'Participant_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Sport_hilo", "'Sport_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Zone_hilo", "'Zone_hilo', '', '1', '10', '', '', 'Int64', 'False'");

            modelBuilder.Entity("TvSports.Core.Entities.AdditionalTeamInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Key");

                    b.Property<int?>("TeamId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("AdditionalTeamInformation");
                });

            modelBuilder.Entity("TvSports.Core.Entities.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:HiLoSequenceName", "Channel_hilo")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Channel");
                });

            modelBuilder.Entity("TvSports.Core.Entities.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:HiLoSequenceName", "Competition_hilo")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SportForeignKey");

                    b.Property<int>("ZoneForeignKey");

                    b.HasKey("Id");

                    b.HasIndex("SportForeignKey");

                    b.HasIndex("ZoneForeignKey");

                    b.ToTable("Competition");
                });

            modelBuilder.Entity("TvSports.Core.Entities.CompetitionInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompetitionForeignKey");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionForeignKey");

                    b.ToTable("CompetitionInstance");
                });

            modelBuilder.Entity("TvSports.Core.Entities.CompetitionInstanceParticipant", b =>
                {
                    b.Property<int>("CompetitionInstanceId");

                    b.Property<int>("ParticipantId");

                    b.HasKey("CompetitionInstanceId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("CompetitionInstanceParticipant");
                });

            modelBuilder.Entity("TvSports.Core.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:HiLoSequenceName", "Game_hilo")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("CompetitionInstanceId");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("ParticipantAwayForeignKey");

                    b.Property<int>("ParticipantHomeForeignKey");

                    b.Property<int?>("PointsAway");

                    b.Property<int?>("PointsHome");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionInstanceId");

                    b.HasIndex("ParticipantAwayForeignKey");

                    b.HasIndex("ParticipantHomeForeignKey");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("TvSports.Core.Entities.ParticipantBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:HiLoSequenceName", "Participant_hilo")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Participant");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ParticipantBase");
                });

            modelBuilder.Entity("TvSports.Core.Entities.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:HiLoSequenceName", "Sport_hilo")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Sport");
                });

            modelBuilder.Entity("TvSports.Core.Entities.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:HiLoSequenceName", "Zone_hilo")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<int>("ZoneForeignKey");

                    b.Property<int?>("ZoneParentForeignKey");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ZoneParentForeignKey");

                    b.ToTable("Zone");
                });

            modelBuilder.Entity("TvSports.Core.Entities.Player", b =>
                {
                    b.HasBaseType("TvSports.Core.Entities.ParticipantBase");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.ToTable("Player");

                    b.HasDiscriminator().HasValue("Player");
                });

            modelBuilder.Entity("TvSports.Core.Entities.Team", b =>
                {
                    b.HasBaseType("TvSports.Core.Entities.ParticipantBase");

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("Nickname")
                        .HasMaxLength(50);

                    b.Property<string>("Tricode")
                        .HasMaxLength(3);

                    b.ToTable("Team");

                    b.HasDiscriminator().HasValue("Team");
                });

            modelBuilder.Entity("TvSports.Core.Entities.AdditionalTeamInformation", b =>
                {
                    b.HasOne("TvSports.Core.Entities.Team")
                        .WithMany("AddionalTeamInformations")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("TvSports.Core.Entities.Competition", b =>
                {
                    b.HasOne("TvSports.Core.Entities.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TvSports.Core.Entities.Zone", "Zone")
                        .WithMany("Competitions")
                        .HasForeignKey("ZoneForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TvSports.Core.Entities.CompetitionInstance", b =>
                {
                    b.HasOne("TvSports.Core.Entities.Competition", "Competition")
                        .WithMany("CompetitionInstances")
                        .HasForeignKey("CompetitionForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TvSports.Core.Entities.CompetitionInstanceParticipant", b =>
                {
                    b.HasOne("TvSports.Core.Entities.CompetitionInstance", "CompetitionInstance")
                        .WithMany("CompetitionInstanceParticipants")
                        .HasForeignKey("CompetitionInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TvSports.Core.Entities.ParticipantBase", "Participant")
                        .WithMany("CompetitionInstanceParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TvSports.Core.Entities.Game", b =>
                {
                    b.HasOne("TvSports.Core.Entities.CompetitionInstance", "CompetitionInstance")
                        .WithMany()
                        .HasForeignKey("CompetitionInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TvSports.Core.Entities.ParticipantBase", "ParticipantAway")
                        .WithMany()
                        .HasForeignKey("ParticipantAwayForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TvSports.Core.Entities.ParticipantBase", "ParticipantHome")
                        .WithMany()
                        .HasForeignKey("ParticipantHomeForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TvSports.Core.Entities.Zone", b =>
                {
                    b.HasOne("TvSports.Core.Entities.Zone", "Parent")
                        .WithMany()
                        .HasForeignKey("ZoneParentForeignKey");
                });
#pragma warning restore 612, 618
        }
    }
}
